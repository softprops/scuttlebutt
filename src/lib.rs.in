
/// Kubernets cluster event
#[derive(Serialize, Deserialize, Debug)]
pub struct Event {
    ///
    pub object: Object,
    #[serde(rename = "type")]
    pub event_type: String
}

/// A description of the event
#[derive(Serialize, Deserialize, Debug)]
pub struct Object {
  /// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#resources
  #[serde(rename = "apiVersion")]
  pub api_version: String,
  /// The number of times this event has occurred.
  pub count: usize,
  /// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
  #[serde(rename = "firstTimestamp")]
  pub first_timestamp: String,
  /// The time at which the most recent occurrence of this event was recorded.
  #[serde(rename = "lastTimestamp")]
  pub last_timestamp: String,
  /// The object that this event is about.
  #[serde(rename = "involvedObject")]
  pub involved_object: ObjectReference,
  /// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  pub kind: String,
  pub message: String,
  /// Standard object’s metadata. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  pub metadata: ObjectMeta,
  /// This should be a short, machine understandable string that gives the reason for the transition into the object’s current status.
  pub reason: String,
  /// The component reporting this event. Should be a short machine understandable string.
  pub source: EventSource,
  /// Type of this event (Normal, Warning), new types could be added in the future
  #[serde(rename = "type")]
  pub object_type: String
}

/// ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
#[derive(Serialize, Deserialize, Debug)]
pub struct ObjectMeta {
  /// CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  /// Populated by the system. Read-only. Null for lists. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  #[serde(rename = "creationTimestamp")]
  pub creation_timestamp: String,
  /// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested.
  /// Populated by the system when a graceful deletion is requested. Read-only. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#metadata
  #[serde(rename = "deletionTimestamp")]
  pub deletion_timestamp: String,
  /// Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  pub name: String,
  /// Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
  /// Must be a DNS_LABEL. Cannot be updated. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  pub namespace: String,
  /// An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
  /// Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  #[serde(rename = "resourceVersion")]
  pub resource_version: String,
  /// SelfLink is a URL representing this object. Populated by the system. Read-only.
  #[serde(rename = "selfLink")]
  pub self_link: String,
  /// UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
  /// Populated by the system. Read-only. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  pub uid: String
}

/// EventSource contains information for an event.
#[derive(Serialize, Deserialize, Debug)]
pub struct EventSource {
  /// Component from which the event is generated.
  pub component: String,
  /// Host name on which the event is generated.
  pub host: String
}

/// ObjectReference contains enough information to let you inspect or modify the referred object.
#[derive(Serialize, Deserialize, Debug)]
pub struct ObjectReference {
  /// API version of the referent.
  #[serde(rename = "apiVersion")]
  pub api_version: String,
  /// Specific resourceVersion to which this reference is made, if any. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#concurrency-control-and-consistency
  #[serde(rename = "resourceVersion")]
  pub resource_version: String,
  /// UID of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#uids
  pub uid: String,
  /// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
  #[serde(rename = "fieldPath")]
  pub field_path: Option<String>,
  /// Kind of the referent. More info: http://releases.k8s.io/release-1.3/docs/devel/api-conventions.md#types-kinds
  pub kind: String,
  /// Name of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/identifiers.md#names
  pub name: String,
  /// Namespace of the referent. More info: http://releases.k8s.io/release-1.3/docs/user-guide/namespaces.md
  pub namespace: String
}
